import datetime
import os
import psycopg2
from dotenv import load_dotenv

load_dotenv()

CREATE_GAMES_TABLE = ''' CREATE TABLE IF NOT EXISTS games (
    id SERIAL PRIMARY KEY,
    title TEXT,
    game_date REAL
    );'''

CREATE_USERS_TABLE = '''CREATE TABLE IF NOT EXISTS users (
    username TEXT PRIMARY KEY
    );'''

CREATE_WATCHED_TABLE = '''CREATE TABLE IF NOT EXISTS watched (
    users_username TEXT,
    games_id INTEGER,
    FOREIGN KEY(users_username) REFERENCES users(username),
    FOREIGN KEY(games_id) REFERENCES games(id)
    );'''


INSERT_GAME = "INSERT INTO games(title, game_date) VALUES (%s,%s);"
INSERT_NEW_USER = "INSERT INTO users(username) VALUES (%s);"
SELECT_GAMES = "SELECT * FROM games;"
SELECT_UPCOMING_GAMES = "SELECT * FROM games WHERE game_date BETWEEN %s AND %s;"

SELECT_TEAM = "SELECT * FROM games WHERE title = %s;"

SELECT_WATCHED_GAMES = '''SELECT games.* FROM games
    JOIN watched ON games.id = watched.games_id
    JOIN users ON watched.users_username = users.username
    WHERE users.username = %s;'''

INSERT_WATCHED_GAME = "INSERT INTO watched(users_username, games_id) VALUES (%s,%s);"
CHECK_GAME_EXISTS = "SELECT * FROM games WHERE id = %s;"
CHECK_USER_EXISTS = "SELECT username FROM users WHERE username = %s;"


connection = psycopg2.connect(os.environ['DATABASE_URL'])

def normalize_username(username):
    return username.lower()


def create_tables():
    with connection:
        cursor = connection.cursor()
        cursor.execute(CREATE_GAMES_TABLE)
        cursor.execute(CREATE_USERS_TABLE)
        cursor.execute(CREATE_WATCHED_TABLE)


def add_game(title, game_date):
    with connection:
        cursor = connection.cursor()
        cursor.execute(INSERT_GAME, (title, game_date))


def add_user(username):
    with connection:
        cursor = connection.cursor()
        cursor.execute(INSERT_NEW_USER, (normalize_username(username),))


def view_games(upcoming=False):
    cursor = connection.cursor()
    if not upcoming:
        cursor.execute(SELECT_GAMES)
    else:
        next_week = datetime.datetime.today() + datetime.timedelta(days=7)
        next_week = next_week.timestamp()
        today_timestamp = datetime.datetime.today().timestamp()
        cursor.execute(SELECT_UPCOMING_GAMES, (today_timestamp, next_week,))
    return cursor.fetchall()


def search_games(name):
    cursor = connection.cursor()
    cursor.execute(SELECT_TEAM, (name,))
    return cursor.fetchall()


def view_watched_games(username):
    cursor = connection.cursor()
    cursor.execute(SELECT_WATCHED_GAMES, (normalize_username(username),))
    return cursor.fetchall()


def watch_game(game_id, username):
    if game_exists(game_id):
        with connection:
            cursor = connection.cursor()
            cursor.execute(INSERT_WATCHED_GAME, (normalize_username(username), game_id))
        return True
    else:
        return False


def game_exists(game_id):
    if game_id.isnumeric():
        cursor = connection.cursor()
        cursor.execute(CHECK_GAME_EXISTS, (game_id,))
        if cursor.fetchone() is not None:
            return True
        else:
            return False
    else:
        return False

def user_exists(username):
    cursor = connection.cursor()
    cursor.execute(CHECK_USER_EXISTS, (normalize_username(username),))
    if cursor.fetchone() is not None:
        return True
    else:
        return False
